package com.homework.homework2;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.*;import java.util.HashMap;import java.util.Iterator;import java.util.Set;/** * Created by aa on 2018/11/14. */public class Server {    private static Selector clientSend;    private static Selector clientRecevice;    private static HashMap<String,String> map = new HashMap<>();    private static ByteBuffer bb = ByteBuffer.allocate(1024);    public static void main(String[] args) {        try {            clientSend = Selector.open();            clientRecevice = Selector.open();            ServerSocketChannel ssc = ServerSocketChannel.open();            ssc.bind(new InetSocketAddress(8889));            ssc.configureBlocking(false);            ssc.register(clientSend, SelectionKey.OP_ACCEPT);            while (true){                if(clientSend.select()>0){                    Set<SelectionKey> set = clientSend.selectedKeys();                    Iterator<SelectionKey> it = set.iterator();                    while (it.hasNext()){                        SelectionKey key = it.next();                    }                }            }        }catch (IOException e){            e.fillInStackTrace();        }    }    public static void dealChannel(SelectionKey key){        try {            if(key.isAcceptable()){                ServerSocketChannel ssc = (ServerSocketChannel) key.channel();                SocketChannel sc = ssc.accept();                sc.configureBlocking(false);                String ipPort = sc.getRemoteAddress().toString();                String[] ipAport = ipPort.split(":");                if("3366".equals(ipAport[1])){                    System.out.println("新的客户端发送端与服务器建立连接");                    if(map.containsKey(ipAport[0])){                        sendMessage();                    }else{                        sendMessage();                    }                }else if("3377".equals(ipAport[1])){                    System.out.println("新的客户端接收端与服务器建立连接");                    sc.register(clientRecevice,SelectionKey.OP_WRITE);                }else{                    sc.close();                }                key.interestOps(SelectionKey.OP_ACCEPT);            }else if(key.isReadable()){                SocketChannel sc = (SocketChannel) key.channel();                bb.clear();                sc.read(bb);                String str = new String(bb.array(),0,bb.position());                String ipPort = sc.getRemoteAddress().toString();                String[] ipAport = ipPort.split(":");                if(map.containsKey(ipAport[0])){                    sendMessage("昵称已存在",ipAport[0]);                }else{                    map.put(ipAport[0],str);                    str = "欢迎" + "大家鼓掌";                    sendMessage(str,"");                }                System.out.println(str);                key.interestOps(SelectionKey.OP_READ);            }        } catch (IOException e) {            key.cancel();            System.out.println("断开。。。");        }    }    public static void sendMessage(String msg,String ip) {        boolean flg = false;        try {            if(clientRecevice.select()>0){                Set<SelectionKey> set = clientRecevice.selectedKeys();                Iterator<SelectionKey> it = set.iterator();                while ()            }        }catch (Exception e){        }    }}